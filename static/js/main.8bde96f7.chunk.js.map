{"version":3,"sources":["components/LinkIconButton.tsx","components/postprocessing/DistortionPass.tsx","utils/file.ts","components/postprocessing/ripple.ts","components/postprocessing/RipplePass.tsx","components/Effect.tsx","components/ImagePlane.tsx","components/TCanvas.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["LinkIconButton","props","positionStyle","imagePath","linkPath","position","size","useState","hover","setHover","publicImagePath","process","styles","topLeft","topRight","bottomLeft","bottomRight","style","href","target","rel","onMouseEnter","onMouseLeave","hoverStyles","img","src","alt","width","height","temp","fontSize","top","left","right","bottom","objectFit","opacity","transform","transition","extend","ShaderPass","DistortionPass","enabled","progress","scale","distortionRef","useRef","shader","useMemo","uniforms","tDiffuse","value","u_time","u_progress","u_scale","vertexShader","fragmentShader","useFrame","current","ref","attachArray","args","publicPath","path","RippleRenderer","_texture","_scene","_target","_camera","_meshs","_max","_frequency","_mouse","THREE","_prevMouse","_currentWave","_cameraProps","frustumSize","window","innerHeight","innerWidth","near","far","_createMesh","geometry","material","map","transparent","blending","depthTest","depthWrite","i","mesh","clone","rotateZ","Math","PI","random","visible","add","push","_handleMouseMove","e","x","clientX","y","clientY","_handleResize","updateProjectionMatrix","setSize","_setNewWave","set","_trackMousePos","distance","distanceTo","update","gl","uTexture","setRenderTarget","render","texture","clear","forEach","rotation","z","dispose","removeEventListener","this","addEventListener","RipplePass","fallback","Ripple","shaderRef","rippleTexture","useTexture","effect","u_displacement","useEffect","EffectComposer","RenderPass","Effect","dist_datas","useControls","min","max","step","ripple_datas","composerRef","useThree","scene","camera","ImagePlane","name","textures","u_texture","TCanvas","fov","aspect","dpr","devicePixelRatio","attach","OrbitControls","Stats","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bde96f7.chunk.js","sourcesContent":["import React, { useState, VFC } from 'react';\r\n\r\ntype LinkIconButtonProps = {\r\n\t/**\r\n\t * Resource path directly under the public folder.\r\n\t * @example '/assets/icons/github.svg'\r\n\t */\r\n\timagePath: string\r\n\t/**\r\n\t * @example 'https://github.com'\r\n\t */\r\n\tlinkPath: string\r\n\t/**\r\n\t * @default 'bottom-right'\r\n\t */\r\n\tposition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\r\n\t/**\r\n\t * @default [50, 50] - width:50px, height:50px\r\n\t */\r\n\tsize?: [number, number]\r\n}\r\n\r\nexport const LinkIconButton: VFC<LinkIconButtonProps> = props => {\r\n\tconst { imagePath, linkPath, position = 'bottom-right', size = [50, 50] } = props\r\n\tconst [hover, setHover] = useState(false)\r\n\r\n\tconst publicImagePath = process.env.PUBLIC_URL + imagePath\r\n\r\n\tlet positionStyle\r\n\tswitch (position) {\r\n\t\tcase 'top-left':\r\n\t\t\tpositionStyle = styles.topLeft\r\n\t\t\tbreak\r\n\t\tcase 'top-right':\r\n\t\t\tpositionStyle = styles.topRight\r\n\t\t\tbreak\r\n\t\tcase 'bottom-left':\r\n\t\t\tpositionStyle = styles.bottomLeft\r\n\t\t\tbreak\r\n\t\tdefault:\r\n\t\t\tpositionStyle = styles.bottomRight\r\n\t}\r\n\r\n\treturn (\r\n\t\t<a\r\n\t\t\tstyle={positionStyle}\r\n\t\t\thref={linkPath}\r\n\t\t\ttarget=\"_blank\"\r\n\t\t\trel=\"noreferrer noopener\"\r\n\t\t\tonMouseEnter={() => setHover(true)}\r\n\t\t\tonMouseLeave={() => setHover(false)}>\r\n\t\t\t<img style={hover ? hoverStyles.img : styles.img} src={publicImagePath} alt=\"\" width={size[0]} height={size[1]} />\r\n\t\t</a>\r\n\t)\r\n}\r\n\r\n// ========================================================\r\n// styles\r\n\r\ntype Styles = { [key in string]: React.CSSProperties }\r\n\r\nconst temp: Styles = {\r\n\tcontainer: {\r\n\t\tposition: 'absolute',\r\n\t\tfontSize: '0'\r\n\t}\r\n}\r\n\r\nconst styles: Styles = {\r\n\ttopLeft: {\r\n\t\t...temp.container,\r\n\t\ttop: '10px',\r\n\t\tleft: '10px'\r\n\t},\r\n\ttopRight: {\r\n\t\t...temp.container,\r\n\t\ttop: '10px',\r\n\t\tright: '10px'\r\n\t},\r\n\tbottomLeft: {\r\n\t\t...temp.container,\r\n\t\tbottom: '10px',\r\n\t\tleft: '10px'\r\n\t},\r\n\tbottomRight: {\r\n\t\t...temp.container,\r\n\t\tbottom: '10px',\r\n\t\tright: '10px'\r\n\t},\r\n\timg: {\r\n\t\tobjectFit: 'cover',\r\n\t\topacity: '0.5',\r\n\t\ttransform: 'rotate(0deg)',\r\n\t\ttransition: 'all 0.3s'\r\n\t}\r\n}\r\n\r\nconst hoverStyles: Styles = {\r\n\timg: {\r\n\t\t...styles.img,\r\n\t\topacity: '1',\r\n\t\ttransform: 'rotate(360deg)'\r\n\t}\r\n}\r\n","import { useMemo, useRef, VFC } from 'react';\r\nimport { ShaderPass } from 'three-stdlib';\r\nimport { extend, useFrame } from '@react-three/fiber';\r\n\r\nextend({ ShaderPass })\r\n\r\ntype DistortionPassType = {\r\n\tenabled?: boolean\r\n\tprogress?: number\r\n\tscale?: number\r\n}\r\n\r\nexport const DistortionPass: VFC<DistortionPassType> = props => {\r\n\tconst { enabled = true, progress = 0, scale = 1 } = props\r\n\r\n\tconst distortionRef = useRef<ShaderPass>(null)\r\n\r\n\tconst shader: THREE.Shader = useMemo(() => {\r\n\t\treturn {\r\n\t\t\tuniforms: {\r\n\t\t\t\ttDiffuse: { value: null },\r\n\t\t\t\tu_time: { value: 0 },\r\n\t\t\t\tu_progress: { value: 0 },\r\n\t\t\t\tu_scale: { value: 1 }\r\n\t\t\t},\r\n\t\t\tvertexShader: vertexShader,\r\n\t\t\tfragmentShader: fragmentShader\r\n\t\t}\r\n\t}, [])\r\n\r\n\tuseFrame(() => {\r\n\t\tdistortionRef.current!.uniforms.u_time.value += 0.01\r\n\t})\r\n\r\n\treturn (\r\n\t\t<shaderPass\r\n\t\t\tref={distortionRef}\r\n\t\t\tattachArray=\"passes\"\r\n\t\t\targs={[shader]}\r\n\t\t\tenabled={enabled}\r\n\t\t\tuniforms-u_progress-value={progress}\r\n\t\t\tuniforms-u_scale-value={scale}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\n// --------------------------------------------------------\r\nconst vertexShader = `\r\nvarying vec2 v_uv;\r\n\r\nvoid main() {\r\n  v_uv = uv;\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n}\r\n`\r\n\r\nconst fragmentShader = `\r\nuniform sampler2D tDiffuse;\r\nuniform float u_time;\r\nuniform float u_progress;\r\nuniform float u_scale;\r\nvarying vec2 v_uv;\r\n\r\nvoid main() {\r\n  vec2 uv = v_uv;\r\n\r\n  vec2 p = 2.0 * v_uv - 1.0; // -1 ~ 1\r\n  p += 0.1 * cos(u_scale * 3.7 * p.yx + 1.4 * u_time + vec2(2.2, 3.4));\r\n  p += 0.1 * cos(u_scale * 3.0 * p.yx + 1.0 * u_time + vec2(1.2, 3.4));\r\n  p += 0.3 * cos(u_scale * 5.0 * p.yx + 2.6 * u_time + vec2(4.2, 1.4));\r\n  p += 0.3 * cos(u_scale * 7.5 * p.yx + 3.6 * u_time + vec2(12.2, 3.4));\r\n\r\n\tuv.x = mix(v_uv.x, length(p), u_progress);\r\n  uv.y = mix(v_uv.y, 0.5 * length(p) + 0.15, u_progress);\r\n  \r\n  vec4 color = texture2D(tDiffuse, uv);\r\n  \r\n  gl_FragColor = color;\r\n  // gl_FragColor = vec4(vec3(length(p)), 1.0);\r\n}\r\n`\r\n","export const publicPath = (path: string) => {\r\n\treturn process.env.PUBLIC_URL + path\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class RippleRenderer {\r\n\tprivate _scene: THREE.Scene\r\n\tprivate _target: THREE.WebGLRenderTarget\r\n\tprivate _camera: THREE.OrthographicCamera\r\n\tprivate _meshs: THREE.Mesh[] = []\r\n\t/** 波紋の最大描画数 */\r\n\tprivate _max = 100\r\n\t/** 1フレームでマウスがどれだけ移動したら描画するか */\r\n\tprivate _frequency = 5\r\n\t/** マウス座標 */\r\n\tprivate _mouse = new THREE.Vector2(0, 0)\r\n\t/** 前のフレームでのマウス座標 */\r\n\tprivate _prevMouse = new THREE.Vector2(0, 0)\r\n\t/** 現在のフレームで描画された波紋のインデックス */\r\n\tprivate _currentWave = 0\r\n\r\n\t/**\r\n\t * コンストラクタ\r\n\t * @param _texture 波紋のテクスチャー\r\n\t */\r\n\tconstructor(private _texture: THREE.Texture) {\r\n\t\tthis._scene = new THREE.Scene()\r\n\t\tthis._target = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight)\r\n\t\t// camera\r\n\t\tconst { width, height, near, far } = this._cameraProps()\r\n\t\tthis._camera = new THREE.OrthographicCamera(-width, width, height, -height, near, far)\r\n\t\tthis._camera.position.set(0, 0, 2)\r\n\t\t// mesh\r\n\t\tthis._createMesh()\r\n\t\t// events\r\n\t\twindow.addEventListener('mousemove', this._handleMouseMove)\r\n\t\twindow.addEventListener('resize', this._handleResize)\r\n\t}\r\n\r\n\tprivate _cameraProps = () => {\r\n\t\tconst frustumSize = window.innerHeight\r\n\t\tconst aspect = window.innerWidth / window.innerHeight\r\n\t\tconst [w, h] = [(frustumSize * aspect) / 2, frustumSize / 2]\r\n\t\treturn { width: w, height: h, near: -1000, far: 1000 }\r\n\t}\r\n\r\n\tprivate _createMesh = () => {\r\n\t\tconst size = 64\r\n\t\tconst geometry = new THREE.PlaneGeometry(size, size)\r\n\t\tconst material = new THREE.MeshBasicMaterial({\r\n\t\t\tmap: this._texture,\r\n\t\t\ttransparent: true,\r\n\t\t\tblending: THREE.AdditiveBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\tdepthWrite: false\r\n\t\t})\r\n\t\tfor (let i = 0; i < this._max; i++) {\r\n\t\t\tconst mesh = new THREE.Mesh(geometry.clone(), material.clone())\r\n\t\t\tmesh.rotateZ(2 * Math.PI * Math.random())\r\n\t\t\tmesh.visible = false\r\n\t\t\tthis._scene.add(mesh)\r\n\t\t\tthis._meshs.push(mesh)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _handleMouseMove = (e: MouseEvent) => {\r\n\t\tthis._mouse.x = e.clientX - window.innerWidth / 2\r\n\t\tthis._mouse.y = window.innerHeight / 2 - e.clientY\r\n\t}\r\n\r\n\tprivate _handleResize = () => {\r\n\t\tconst { width, height } = this._cameraProps()\r\n\t\tthis._camera.left = -width\r\n\t\tthis._camera.right = width\r\n\t\tthis._camera.top = height\r\n\t\tthis._camera.bottom = -height\r\n\t\tthis._camera.updateProjectionMatrix()\r\n\t\tthis._target.setSize(window.innerWidth, window.innerHeight)\r\n\t}\r\n\r\n\tprivate _setNewWave = () => {\r\n\t\tconst mesh = this._meshs[this._currentWave]\r\n\t\tmesh.visible = true\r\n\t\tmesh.position.set(this._mouse.x, this._mouse.y, 0)\r\n\t\tmesh.scale.x = mesh.scale.y = 0.2\r\n\t\t;(mesh.material as THREE.MeshBasicMaterial).opacity = 0.5\r\n\t}\r\n\r\n\tprivate _trackMousePos = () => {\r\n\t\t// 今のマウス座標と前回のフレームのマウス座標の距離\r\n\t\tconst distance = this._mouse.distanceTo(this._prevMouse)\r\n\t\tif (this._frequency < distance) {\r\n\t\t\tthis._setNewWave()\r\n\t\t\tthis._currentWave = (this._currentWave + 1) % this._max\r\n\t\t\t// console.log(this._currentWave)\r\n\t\t}\r\n\t\tthis._prevMouse.x = this._mouse.x\r\n\t\tthis._prevMouse.y = this._mouse.y\r\n\t}\r\n\r\n\t/**\r\n\t * 描画を更新する\r\n\t * @param gl メインレンダラー\r\n\t * @param uTexture 波紋の描画結果を格納するuniform\r\n\t */\r\n\tupdate = (gl: THREE.WebGLRenderer, uTexture: THREE.IUniform<any>) => {\r\n\t\tthis._trackMousePos()\r\n\r\n\t\tgl.setRenderTarget(this._target)\r\n\t\tgl.render(this._scene, this._camera)\r\n\t\tuTexture.value = this._target.texture\r\n\t\tgl.setRenderTarget(null)\r\n\t\tgl.clear()\r\n\r\n\t\tthis._meshs.forEach(mesh => {\r\n\t\t\tif (mesh.visible) {\r\n\t\t\t\tconst material = mesh.material as THREE.MeshBasicMaterial\r\n\t\t\t\tmesh.rotation.z += 0.02\r\n\t\t\t\tmaterial.opacity *= 0.97\r\n\t\t\t\tmesh.scale.x = 0.98 * mesh.scale.x + 0.17\r\n\t\t\t\tmesh.scale.y = mesh.scale.x\r\n\t\t\t\tif (material.opacity < 0.002) mesh.visible = false\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * インスタンスを破棄する\r\n\t */\r\n\tdispose = () => {\r\n\t\twindow.removeEventListener('mousemove', this._handleMouseMove)\r\n\t\twindow.removeEventListener('resize', this._handleResize)\r\n\t}\r\n}\r\n","import React, { Suspense, useEffect, useMemo, useRef, VFC } from 'react';\r\nimport { ShaderPass } from 'three-stdlib';\r\nimport { useTexture } from '@react-three/drei';\r\nimport { extend, useFrame } from '@react-three/fiber';\r\nimport { publicPath } from '../../utils/file';\r\nimport { RippleRenderer } from './ripple';\r\n\r\nextend({ ShaderPass })\r\n\r\ntype RipplePassType = {\r\n\tenabled?: boolean\r\n}\r\n\r\nexport const RipplePass: VFC<RipplePassType> = props => {\r\n\tconst { enabled = true } = props\r\n\r\n\treturn (\r\n\t\t<Suspense fallback={null}>\r\n\t\t\t<Ripple enabled={enabled} />\r\n\t\t</Suspense>\r\n\t)\r\n}\r\n\r\n// ========================================================\r\ntype RippleType = {\r\n\tenabled?: boolean\r\n}\r\n\r\nconst Ripple: VFC<RippleType> = props => {\r\n\tconst { enabled = true } = props\r\n\r\n\tconst shaderRef = useRef<ShaderPass>(null)\r\n\r\n\tconst rippleTexture = useTexture(publicPath('/assets/textures/brush.png'))\r\n\tconst effect = useMemo(() => new RippleRenderer(rippleTexture), [rippleTexture])\r\n\r\n\tconst shader: THREE.Shader = useMemo(() => {\r\n\t\treturn {\r\n\t\t\tuniforms: {\r\n\t\t\t\ttDiffuse: { value: null },\r\n\t\t\t\tu_displacement: { value: null }\r\n\t\t\t},\r\n\t\t\tvertexShader: vertexShader,\r\n\t\t\tfragmentShader: fragmentShader\r\n\t\t}\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\treturn () => effect.dispose()\r\n\t}, [effect])\r\n\r\n\tuseFrame(({ gl }) => {\r\n\t\teffect.update(gl, shaderRef.current!.uniforms.u_displacement)\r\n\t})\r\n\r\n\treturn <shaderPass ref={shaderRef} attachArray=\"passes\" args={[shader]} enabled={enabled} />\r\n}\r\n\r\n// --------------------------------------------------------\r\nconst vertexShader = `\r\nvarying vec2 v_uv;\r\n\r\nvoid main() {\r\n  v_uv = uv;\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n}\r\n`\r\n\r\nconst fragmentShader = `\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D u_displacement;\r\nvarying vec2 v_uv;\r\n\r\nfloat PI = 3.141592653589;\r\n\r\nvoid main() {\r\n  vec2 uv = v_uv;\r\n\r\n  vec4 disp = texture2D(u_displacement, uv);\r\n  float theta = disp.r * 2.0 * PI;\r\n  vec2 dir = vec2(sin(theta), cos(theta));\r\n  uv += dir * disp.r * 0.1;\r\n\r\n  vec4 color = texture2D(tDiffuse, uv);\r\n\r\n  gl_FragColor = color;\r\n  // gl_FragColor = texture2D(u_displacement, v_uv);\r\n}\r\n`\r\n","import { useControls } from 'leva';\r\nimport React, { useEffect, useRef, VFC } from 'react';\r\nimport { EffectComposer, RenderPass, ShaderPass } from 'three-stdlib';\r\nimport { extend, useFrame, useThree } from '@react-three/fiber';\r\nimport { DistortionPass } from './postprocessing/DistortionPass';\r\nimport { RipplePass } from './postprocessing/RipplePass';\r\n\r\nextend({ EffectComposer, RenderPass, ShaderPass })\r\n\r\nexport const Effect: VFC = () => {\r\n\tconst dist_datas = useControls('Distortion', {\r\n\t\tenabled: true,\r\n\t\tprogress: { value: 0, min: 0, max: 1, step: 0.01 },\r\n\t\tscale: { value: 1, min: 0, max: 5, step: 0.01 }\r\n\t})\r\n\r\n\tconst ripple_datas = useControls('Ripple', {\r\n\t\tenabled: true\r\n\t})\r\n\r\n\tconst composerRef = useRef<EffectComposer>(null)\r\n\tconst { gl, scene, camera, size } = useThree()\r\n\r\n\tuseEffect(() => {\r\n\t\tcomposerRef.current!.setSize(size.width, size.height)\r\n\t}, [size])\r\n\r\n\tuseFrame(() => {\r\n\t\tcomposerRef.current!.render()\r\n\t}, 1)\r\n\r\n\treturn (\r\n\t\t<effectComposer ref={composerRef} args={[gl]}>\r\n\t\t\t<renderPass attachArray=\"passes\" args={[scene, camera]} />\r\n\t\t\t<DistortionPass {...dist_datas} />\r\n\t\t\t<RipplePass {...ripple_datas} />\r\n\t\t</effectComposer>\r\n\t)\r\n}\r\n","import React, { VFC } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Plane, useTexture } from '@react-three/drei';\r\nimport { publicPath } from '../utils/file';\r\n\r\nexport const ImagePlane: VFC = () => {\r\n\tconst path = (name: string) => publicPath(`/assets/images/${name}.jpg`)\r\n\tconst textures = useTexture([path('thum1'), path('thum2'), path('thum3')])\r\n\r\n\tconst material = (texture: THREE.Texture) =>\r\n\t\tnew THREE.ShaderMaterial({\r\n\t\t\tuniforms: {\r\n\t\t\t\tu_texture: { value: texture }\r\n\t\t\t},\r\n\t\t\tvertexShader: vertexShader,\r\n\t\t\tfragmentShader: fragmentShader\r\n\t\t})\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{textures.map((texture, i) => (\r\n\t\t\t\t<Plane key={i} args={[1, 1 * (315 / 600)]} material={material(texture)} scale={0.98} position={[i - 1, 0, 0]} />\r\n\t\t\t))}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n// --------------------------------------------------------\r\nconst vertexShader = `\r\nvarying vec2 v_uv;\r\n\r\nvoid main() {\r\n  v_uv = uv;\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n}\r\n`\r\n\r\nconst fragmentShader = `\r\nuniform sampler2D u_texture;\r\nvarying vec2 v_uv;\r\n\r\nvoid main() {\r\n  vec4 color = texture2D(u_texture, v_uv);\r\n  gl_FragColor = color;\r\n}\r\n`\r\n","import React, { Suspense, VFC } from 'react';\r\nimport { OrbitControls, Stats } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport { Effect } from './Effect';\r\nimport { ImagePlane } from './ImagePlane';\r\n\r\nexport const TCanvas: VFC = () => {\r\n\treturn (\r\n\t\t<Canvas\r\n\t\t\tcamera={{\r\n\t\t\t\tposition: [0, 0, 2],\r\n\t\t\t\tfov: 50,\r\n\t\t\t\taspect: window.innerWidth / window.innerHeight,\r\n\t\t\t\tnear: 0.1,\r\n\t\t\t\tfar: 2000\r\n\t\t\t}}\r\n\t\t\tdpr={window.devicePixelRatio}>\r\n\t\t\t{/* canvas color */}\r\n\t\t\t<color attach=\"background\" args={['#000']} />\r\n\t\t\t{/* camera controller */}\r\n\t\t\t<OrbitControls attach=\"orbitControls\" />\r\n\t\t\t{/* helper */}\r\n\t\t\t<Stats />\r\n\t\t\t{/* object */}\r\n\t\t\t<Suspense fallback={null}>\r\n\t\t\t\t<ImagePlane />\r\n\t\t\t</Suspense>\r\n\t\t\t{/* effect */}\r\n\t\t\t<Effect />\r\n\t\t</Canvas>\r\n\t)\r\n}\r\n","import React, { VFC } from 'react';\nimport { LinkIconButton } from './LinkIconButton';\nimport { TCanvas } from './TCanvas';\n\nexport const App: VFC = () => {\n\treturn (\n\t\t<div style={{ width: '100vw', height: '100vh' }}>\n\t\t\t<TCanvas />\n\t\t\t<LinkIconButton imagePath=\"/assets/icons/github.svg\" linkPath=\"https://github.com/nemutas/r3f-homunculus\" />\n\t\t</div>\n\t)\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}